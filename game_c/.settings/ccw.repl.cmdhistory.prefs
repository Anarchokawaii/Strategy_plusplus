cmdhistory=["foo" "(foo)" "(foo 0)" "(a-test)" "(max 5 5)" "5" "\\"nyah\\"" "\\n\\"nyan\\"" "(1 2 3 4 5)" "(list 1 2 3 4 5)" "(+ 1 2 3)" "(+ 1 2 3 4 5 6 7 8 9 10)" "(set 1 2 3)" "(set [1 2 3])" "(foo 0\\n     )" "\\n\\n\\"hello world\\"" "\\"poo butt ass\\"" "let x \= 4" "x" "(if false \\"yes\\" \\"no\\")" "[1 2 3]" "(list 1 2 3)" "1N" "1.2e3" "1e3" "1.2e4M" "1.2M" "0x35" "1/3" "(/ 1 3)" "\\\\a" "\\"\\\\a\\"" "\\"pobb ssjdnfjdsf fskdjnf fjsdn fjsdnf doa aowk pv;xc adc sc dkvksdfds" "\\"" "(\\"" "1.2" "1.2m" "1.2M" "1.22222222222222222222222222222222222222222222M" "1.22222222222222222222222222222222222" "\:foo" "\#\\"foo\\"" "{\:a 1 \:b 2}" "(type 2M)" "(type 2)" "(type 2em)" "(type 2e1)" "(type 2.5)" "(type 2.5M)" "(> 6 5)" "(> 6 5 4)" "(> 6 6)" "(>6 5 7\\n    )" "(> 6 5 7)" "(> 6 5 6)" "(> 6 5 5)" "(< 6 5 6)" "(< 4 5 6)" "(+ 1 2 3 4 5 6)" "(- 1 2 3 4 5)" "( - 1 2 3 4 5 6)" "(vector 1 2 3)" "(rand)" "(rand 100)" "(rand 0 100)" "(type rand)" "(ran-int 100)" "(rand-int 100)" "(rand-int 1\\n          )" "(rand-int 1)" "(rand-int 2)" "(type rand)" "(last (list 1 2 3 4 5))" "(last \\"hello\\")" "\:A" "(if 0 \:t \:f)" "(type 0)" "(def my-items [\\"shirt\\" \\"coat\\" \\"hat\\"])" "(doseq [i my-items]\\n  (println i))" "(dotimes [i 10]\\n  (println \\"counting\:\\" i))" "(type let)" "(.-x (java.awt.Point. 1 2))" "(sys.out.println \\"blah\\")" "(.sys.out.println \\"blah\\")" "(.println \\"blah\\")" "(. toUpperCase \\"blah\\")" "(.toUpperCase \\"blah\\")" "(type .toUpperCase)" "(.toUpperCase \\"blah\\")" "(. toUpperCase \\"blah\\")" "(- 5 3)" "(- 5 3 1)" "(javax.swing.JOptionPane/ShowMessageDialog nil \\"hello world\\")" "(javax.swing.JOptionPane/s\\n  howMessageDialog nil \\"hello world\\")" "(javax.swing.JOptionPane/showMessageDialog nil \\"Hello World\\")" "atom" "(atom)" "blah" "(atom blah)" "(range 1 10)" "(range 1 11)" "(((+ 1 1 1)))" "(read 1 2 3)" "\\\\b" "\\\\n" "\\\\newline" "(type \\\\newline)" "\:keyword" "(((\\"dfdsf\\")))" "(1 2 3)" "(list 1 2 3)" "/return" "\\\\return" "\\\\kngfdjg" "\\\\\\"" "\\\\u036A" "\\\\u0263A" "\\\\u263A" ";poo butt ass" "\:" "(type \:d)" "(atom blah)" "(atom \\"atom\\")" "(type list)" "(list \\"a\\" \\"b\\" \\"c\\")" "(type list)" "(type (list 1))" "(println \\\\newline)" "(print \\\\newline)" "(type print)" "(+ 1 2 3 4)" "(remaining)" "(type \:as)" "(type +)" "(type clojure.spec)" "(clojure.spec)" "(type \\"string\\")" "(proxy [com.jogamp.opengl.GLEventListener])" "(proxy [com.jogamp.opengl.GLEventListener] [])" "(bean user)" "(clojure.java.io/Coercions)" "(proxy [com.jogamp.opengl/GLEventListener]\\n       []\\n  )" "(proxy [com.jogamp.opengl/GLEventListener][])" "(. rnd nextInt 10)" "(.next rnd 10)" "(long. 12)" "(String. \\"12\\")" "(Long. 12)" "(Int. 12)" "(int. 12)" "(java.util.stack.)" "(java.util.Stack.)" "(let [Stack (java.util.stack.)]\\n (.push stack \\"you are dumb\\")\\n )" "(let [Stack (java.util.Stack.)]\\n    (.push stack \\"you are dumb\\")\\n    )" "(let [stack (java.util.stack.)]\\n    (.push stack \\"you are dumb\\")\\n    )" "(let [Stack (java.util.Stack.)]\\n    (.push Stack \\"you are dumb\\")\\n    )" "(let [Stack (java.util.Stack.)]\\n       (.push Stack \\"you are dumb\\") Stack\\n       )" "(let [Stack (java.util.Stack.)]\\n       (.push Stack \\"you are dumb\\")\\n       (rest Stack)\\n       )" "(Stack)" "(macroexpand doto)" "(macroexpand-1 doto)" "(System/getenv)" "(pprint (System/getenv))" "(System/getProperty \\"java.version\\")" "(bean \\"string\\")" "(bean \\"\u263A\\")" "(bean \\"\u0254\\")" "(GLProfile/getDefault)" "\\"\\"" "dsf" "\\"\\" \\"\\"" "()" "(\\"\\")" "(com.jogamp.opengl.GLCapabilities)" "(ns?)"]
eclipse.preferences.version=1
